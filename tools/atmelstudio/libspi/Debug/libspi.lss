
libspi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d83  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b47  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000113  00000000  00000000  00002731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	64 c0       	rjmp	.+200    	; 0x11a <__vector_20>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e1       	ldi	r26, 0x10	; 16
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a9 31       	cpi	r26, 0x19	; 25
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	8e d0       	rcall	.+284    	; 0x1e8 <main>
  cc:	97 c0       	rjmp	.+302    	; 0x1fc <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <spi_slave_init>:
}

void spi_slave_register_txstart_handler(void (*txstart_handler)()) {

	// Register handler
	_txstart_handler = txstart_handler;
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8e bd       	out	0x2e, r24	; 46
  d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_txbuffer+0x1>
  dc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_txbuffer>
  e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_txbufend>
  e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_txbufpos>
  e8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
  ec:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	8c bd       	out	0x2c, r24	; 44
  f4:	08 95       	ret

000000f6 <spi_slave_register_txbuffer>:
  f6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_txbuffer+0x1>
  fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_txbuffer>
  fe:	61 50       	subi	r22, 0x01	; 1
 100:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <_txbufend>
 104:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_txbufpos>
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	8e bd       	out	0x2e, r24	; 46
 10e:	08 95       	ret

00000110 <spi_slave_register_txdone_handler>:
}

void spi_slave_register_txdone_handler(void (*txdone_handler)()) {

	// Register handler
	_txdone_handler = txdone_handler;
 110:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 114:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 118:	08 95       	ret

0000011a <__vector_20>:
}

// ------------------------------------------------- Interrupt Service Routines

ISR(SPI_STC_vect) {
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31

	if (_txbufpos == 0) {
 140:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_txbufpos>
 144:	81 11       	cpse	r24, r1
 146:	07 c0       	rjmp	.+14     	; 0x156 <__vector_20+0x3c>
		
		// Call tx start handler
		if (_txstart_handler != NULL) {
 148:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <_txstart_handler>
 14c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <_txstart_handler+0x1>
 150:	30 97       	sbiw	r30, 0x00	; 0
 152:	09 f0       	breq	.+2      	; 0x156 <__vector_20+0x3c>
			(*_txstart_handler)();
 154:	09 95       	icall
		}
	}

	if (_txbufpos < _txbufend) {
 156:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_txbufpos>
 15a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_txbufend>
 15e:	98 17       	cp	r25, r24
 160:	30 f4       	brcc	.+12     	; 0x16e <__vector_20+0x54>

		// Increment buffer position
		_txbufpos++;
 162:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_txbufpos>
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_txbufpos>
 16c:	09 c0       	rjmp	.+18     	; 0x180 <__vector_20+0x66>

	} else {

		// Reset buffer position
		_txbufpos = 0;
 16e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_txbufpos>

		// Call tx done handler
		if (_txdone_handler != NULL) {
 172:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 176:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 17a:	30 97       	sbiw	r30, 0x00	; 0
 17c:	09 f0       	breq	.+2      	; 0x180 <__vector_20+0x66>
			(*_txdone_handler)();
 17e:	09 95       	icall
		}
	}

	// Copy next byte from tx buffer to controller
	if (_txbuffer != NULL) {	
 180:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_txbuffer>
 184:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_txbuffer+0x1>
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	39 f0       	breq	.+14     	; 0x19a <__vector_20+0x80>
		SPDR = *(_txbuffer+_txbufpos);
 18c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <_txbufpos>
 190:	fc 01       	movw	r30, r24
 192:	e2 0f       	add	r30, r18
 194:	f1 1d       	adc	r31, r1
 196:	80 81       	ld	r24, Z
 198:	8e bd       	out	0x2e, r24	; 46
	}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0b be       	out	0x3b, r0	; 59
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <spi_swap_buffer>:
volatile uint8_t dat1[] = {1,2,4,8,16,32,64,128};
volatile uint8_t dat2[] = {128,64,32,16,8,4,2,1};
volatile uint8_t current_buffer;

void spi_swap_buffer() {
	if (current_buffer == 1) {
 1c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <current_buffer>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	41 f4       	brne	.+16     	; 0x1d8 <spi_swap_buffer+0x18>
		spi_slave_register_txbuffer((void *)dat2, 8);
 1c8:	68 e0       	ldi	r22, 0x08	; 8
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	93 df       	rcall	.-218    	; 0xf6 <spi_slave_register_txbuffer>
		current_buffer = 2;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <current_buffer>
 1d6:	08 95       	ret
	} else {
		spi_slave_register_txbuffer((void *)dat1, 8);
 1d8:	68 e0       	ldi	r22, 0x08	; 8
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	8b df       	rcall	.-234    	; 0xf6 <spi_slave_register_txbuffer>
		current_buffer = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <current_buffer>
 1e6:	08 95       	ret

000001e8 <main>:
	}
}

int main(void) {

	spi_slave_init();
 1e8:	73 df       	rcall	.-282    	; 0xd0 <spi_slave_init>
	spi_slave_register_txbuffer((void *)dat1, 8);
 1ea:	68 e0       	ldi	r22, 0x08	; 8
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	82 df       	rcall	.-252    	; 0xf6 <spi_slave_register_txbuffer>
	spi_slave_register_txdone_handler(spi_swap_buffer);
 1f2:	80 ee       	ldi	r24, 0xE0	; 224
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	8c df       	rcall	.-232    	; 0x110 <spi_slave_register_txdone_handler>
	
	sei();
 1f8:	78 94       	sei
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x12>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
